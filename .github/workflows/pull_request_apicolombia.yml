name: Build and test - ApiColombia

on:
  pull_request:
    branches:
      - main
  workflow_dispatch:
  
jobs:
  build:
    name: Build and Test
    runs-on: ubuntu-latest
    defaults:
      run:
        working-directory: api.Tests

    steps:
      - uses: actions/checkout@v4

      - name: Set up .NET Core
        uses: actions/setup-dotnet@v3
        with:
          dotnet-version: '8.0.x'

      - name: Restore dependencies
        run: dotnet restore

      - name: Build with dotnet
        run: dotnet build --configuration Release --no-restore

      - name: Install Cursor CLI
        run: |
          curl https://cursor.com/install -fsS | bash
          echo "$HOME/.cursor/bin" >> $GITHUB_PATH
      
      - name: Perform code review
        env:
          CURSOR_API_KEY: ${{ secrets.CURSOR_API_KEY }}
          GH_TOKEN: ${{ github.token }}
        run: | 
          cursor-agent --force --model "$MODEL" --output-format=text --print "You are operating in a GitHub Actions runner performing automated code review. The gh CLI is available and authenticated via GH_TOKEN. You may comment on pull requests.
    
          Context:
          - Repo: ${{ github.repository }}
          - PR Number: ${{ github.event.pull_request.number }}
          - PR Head SHA: ${{ github.event.pull_request.head.sha }}
          - PR Base SHA: ${{ github.event.pull_request.base.sha }}

          Objectives:
          1) Re-check existing review comments and reply resolved when addressed
          2) Review the current PR diff and flag only clear, high-severity issues
          3) Leave very short inline comments (1-2 sentences) on changed lines only and a brief summary at the end
    
          Procedure:
          - Get existing comments: gh pr view --json comments
          - Get diff: gh pr diff
          - If a previously reported issue appears fixed by nearby changes, reply: ✅ This issue appears to be resolved by the recent changes
          - Avoid duplicates: skip if similar feedback already exists on or near the same lines
    
          Commenting rules:
          - Max 10 inline comments total; prioritize the most critical issues
          - One issue per comment; place on the exact changed line
          - Natural tone, specific and actionable; do not mention automated or high-confidence
          - Use emojis: 🚨 Critical 🔒 Security ⚡ Performance ⚠️ Logic ✅ Resolved ✨ Improvement
    
          Submission:
          - Submit one review containing inline comments plus a concise summary
          - Use only: gh pr review --comment
          - Do not use: gh pr review --approve or --request-changes"

      - name: Run tests with coverage
        run: dotnet test --no-build --configuration Release --settings ./coverlet.runsettings --collect:"XPlat Code Coverage" --logger trx --results-directory ../TestResults /p:CollectCoverage=true /p:CoverletOutput=../TestResults/ /p:CoverletOutputFormat=json
  
      - name: Verify coverage file exists
        working-directory: ./
        run: |
          echo "Current directory: $(pwd)"
          echo "Looking for coverage file at: $(pwd)/TestResults/coverage.json"
          ls -la TestResults/ || echo "Directory listing failed"
          [ -f TestResults/coverage.json ] || (echo "##[error]Coverage file not found in $(pwd)/TestResults/" && exit 1)
      
      - name: Calculate coverage percentage
        working-directory: ./
        id: coverage
        run: |
          # Install jq if missing
          command -v jq >/dev/null || sudo apt-get install -y jq
          
          # Safely calculate coverage (handles null values)
          TOTAL_LINES=$(jq '[.Modules[].Lines? | select(.!=null) | length] | add' TestResults/coverage.json || echo "0")
          COVERED_LINES=$(jq '[.Modules[].Lines? | select(.!=null) | map(select(. > 0)) | length] | add' TestResults/coverage.json || echo "0")
          
          # Default to 0 if no valid data
          [ -z "$TOTAL_LINES" ] && TOTAL_LINES=0
          [ -z "$COVERED_LINES" ] && COVERED_LINES=0
          
          # Calculate percentage (avoid division by zero)
          if [ "$TOTAL_LINES" -gt 0 ]; then
            PERCENT=$(echo "scale=0; $COVERED_LINES * 100 / $TOTAL_LINES" | bc)
          else
            PERCENT=0
          fi
          
          echo "coverage_percentage=$PERCENT" >> $GITHUB_OUTPUT
          echo "Coverage: $PERCENT% ($COVERED_LINES/$TOTAL_LINES lines)"

      - name: Upload Coverage Metadata
        uses: actions/upload-artifact@v4
        with:
          name: coverage-meta
          path: TestResults/coverage.json

      - name: Publish coverage report
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: CoverageReport

      - name: Publish test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: test-results
          path: TestResults